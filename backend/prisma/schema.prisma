generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id           String   @id @default(uuid())
  passwordHash String
  agentName    String   @default("Agent")
  agentEmail   String   @default("agent@example.com")
  updatedAt    DateTime @updatedAt
}

model Lead {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  phone             String
  insuranceInterest String
  status            String   @default("New")
  priority          String   @default("Warm")
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Client {
  id              String            @id @default(uuid())
  
  // Mandatory fields (always required)
  firstName       String            // Mandatory
  lastName        String            // Mandatory  
  dateOfBirth     DateTime          // Mandatory (DOB)
  phoneNumber     String            // Mandatory
  whatsappNumber  String            // Mandatory
  
  // Optional personal fields
  middleName      String?
  email           String?
  state           String?
  city            String?
  address         String?
  birthPlace      String?
  age             Int?              // Calculated from DOB
  gender          Gender?
  height          Float?            // In feet
  weight          Float?            // In kg
  education       String?
  maritalStatus   MaritalStatus?
  businessJob     String?
  nameOfBusiness  String?
  typeOfDuty      String?
  annualIncome    Float?
  panNumber       String?
  gstNumber       String?
  
  // Optional corporate fields
  companyName     String?
  
  // Optional family/employee fields  
  relationship    Relationship?
  
  // System fields
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Documents and images
  documents       Document[]
  profileImage    String?           // Cloudinary URL
  
  // Audit trail
  auditLogs       AuditLog[]
  
  // Policy relationships
  policies        Policy[]
  policyInstances PolicyInstance[]
  
  @@index([email])
  @@index([phoneNumber])
  @@index([companyName])
  @@index([firstName, lastName])
  @@index([dateOfBirth])
  @@index([panNumber])
  @@index([gstNumber])
  @@index([createdAt])
}



model Document {
  id            String       @id @default(uuid())
  clientId      String
  documentType  DocumentType
  fileName      String
  originalName  String
  cloudinaryUrl String
  cloudinaryId  String
  fileSize      Int
  mimeType      String
  uploadedAt    DateTime     @default(now())
  client        Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([documentType])
  @@index([uploadedAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  clientId  String
  action    String
  fieldName String?
  oldValue  String?
  newValue  String?
  changedAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([changedAt])
  @@index([action])
}

model PolicyTemplate {
  id           String           @id @default(uuid())
  policyNumber String           @unique
  policyType   String
  provider     String
  description  String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  instances    PolicyInstance[]

  @@index([policyType])
  @@index([provider])
  @@index([createdAt])
  @@index([policyType, provider])
  @@index([provider, createdAt])
}

model PolicyInstance {
  id               String         @id @default(uuid())
  policyTemplateId String
  clientId         String
  premiumAmount    Float
  status           String         @default("Active")
  startDate        DateTime
  expiryDate       DateTime
  commissionAmount Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  client           Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  policyTemplate   PolicyTemplate @relation(fields: [policyTemplateId], references: [id], onDelete: Cascade)

  @@unique([policyTemplateId, clientId])
  @@index([policyTemplateId])
  @@index([clientId])
  @@index([status])
  @@index([startDate])
  @@index([expiryDate])
  @@index([createdAt])
  @@index([policyTemplateId, status])
  @@index([clientId, status])
  @@index([status, expiryDate])
  @@index([expiryDate, status])
}

model Policy {
  id               String   @id @default(uuid())
  policyNumber     String   @unique
  policyType       String
  provider         String
  premiumAmount    Float
  status           String   @default("Active")
  startDate        DateTime
  expiryDate       DateTime
  commissionAmount Float
  clientId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  client           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(uuid())
  action      String
  description String
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([action])
}



enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Relationship {
  SPOUSE
  CHILD
  PARENT
  SIBLING
  EMPLOYEE
  DEPENDENT
  OTHER
}

enum DocumentType {
  IDENTITY_PROOF
  ADDRESS_PROOF
  INCOME_PROOF
  MEDICAL_REPORT
  POLICY_DOCUMENT
  OTHER
}
